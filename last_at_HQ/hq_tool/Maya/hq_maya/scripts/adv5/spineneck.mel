proc string cc_spine2 ()

{
if(!`objExists "ro_Root_M"` && !`objExists "FKExtraSpine2_M_po"`)
{
    if(`objExists "MUMD_spine1"` && `objExists "PluMin_Chestspine1"`)
    {
       delete  MUMD_spine1  PluMin_Chestspine1;
     }
    if(`objExists "Root_M"`&&`objExists "Spine1_M"`&&`objExists "Spine2_M"`&&`objExists "Spine3_M"`&&`objExists "Chest_M"`&&`objExists "Neck_M"`)
    {
        float $rootm[]=`xform -q -ws -t Root_M`;
        float $spine1[]=`xform -q -ws -t Spine1_M`;
        float $spine2[]=`xform -q -ws -t Spine2_M`;
        float $spine3[]=`xform -q -ws -t Spine3_M`;
        float $chest[]=`xform -q -ws -t Chest_M`;
        float $neck[]=`xform -q -ws -t Neck_M`;
    
    
        string $ro_rootm = `joint -p $rootm[0] $rootm[1] $rootm[2] -n "ro_Root_M"`;
        string $ro_spine1= `joint -p $spine1[0] $spine1[1] $spine1[2] -n "ro_Spine1_M"`;
        string $ro_spine2= `joint -p $spine2[0] $spine2[1] $spine2[2] -n "ro_Spine2_M"`;
        string $ro_spine3= `joint -p $spine3[0] $spine3[1] $spine3[2] -n "ro_Spine3_M"`;
        string $ro_chest= `joint -p $chest[0] $chest[1] $chest[2] -n "ro_Chest_M"`;
        string $ro_neck= `joint -p $neck[0] $neck[1] $neck[2] -n "ro_Neck_M"`;
        joint -e -oj yxz -secondaryAxisOrient xup -ch -zso $ro_rootm;
        string $ro_grop = `group -em -n "ro_joint_G"`;
        parent $ro_rootm $ro_grop;
        string $spine_cuv= `curve -d 3 -p $rootm[0] $rootm[1] $rootm[2] -p $spine1[0] $spine1[1] $spine1[2] -p $spine2[0] $spine2[1] $spine2[2] -p $spine3[0] $spine3[1] $spine3[2] -p $chest[0] $chest[1] $chest[2] -p $neck[0] $neck[1] $neck[2] -k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 3 -k 3 -n "spine_ro_curve"`;
        string $skijione1 = `joint -p $rootm[0] $rootm[1] $rootm[2] -n "spine_skin_joint1"`;
        string $skijione2 = `joint -p $spine2[0] $spine2[1] $spine2[2] -n "spine_skin_joint2"`;
        string $skijione3 = `joint -p $chest[0] $chest[1] $chest[2] -n "spine_skin_joint3"`;
        parent -w $skijione2 $skijione3 $skijione1;
        ikSplineHandleCtx -e -createCurve false ikSplineHandleContext;
        select -r $ro_rootm $ro_neck;
        string $ikhand[] =` ikHandle -sol ikSplineSolver -ccv false -c $spine_cuv -n "spine_ro_ikHandle1"`;
        string $gorpa = `group -n "spine_ro_deformer_G" $spine_cuv $skijione1 $skijione2 $skijione3 $ikhand[0]`;
        setAttr ($spine_cuv+".inheritsTransform") 0;
        select -r $skijione1 $skijione2 $skijione3 $spine_cuv;
        SmoothBindSkin;
        parentConstraint -mo -weight 1  "RootX_M" $skijione1;
        parentConstraint -mo -weight 1  "FKSpine2_M " $skijione2;
        parentConstraint -mo -weight 1  "FKChest_M" $skijione3;
        string $crclh[] = `ls -type skinCluster `;
        int $a_css = size($crclh);
        skinPercent -tv spine_skin_joint1 1 $crclh[$a_css-1] spine_ro_curve.cv[0];
        skinPercent -tv spine_skin_joint1 0.7 -tv spine_skin_joint2 0.3 $crclh[$a_css-1] spine_ro_curve.cv[1];
        skinPercent -tv spine_skin_joint2 1 $crclh[$a_css-1] spine_ro_curve.cv[2];
        skinPercent -tv spine_skin_joint2 1 $crclh[$a_css-1] spine_ro_curve.cv[3];
        skinPercent -tv spine_skin_joint3 1 $crclh[$a_css-1] spine_ro_curve.cv[4];
        skinPercent -tv spine_skin_joint3 1 $crclh[$a_css-1] spine_ro_curve.cv[5];
        parent $gorpa FKOffsetSpine1_M;
        parent $ro_grop FKOffsetSpine1_M;
    }

    string $fkxchest[] = `listRelatives -p FKXChest_M` ;
    string $fkxchesta[] = `listRelatives -p FKExtraChest_M` ;
    string $fkxspine[] = `listRelatives -p FKXSpine2_M` ;
    string $fkxspinea[] = `listRelatives -p FKExtraSpine2_M` ;

    if($fkxchest[0] == "FKChest_M")
    {
        parent FKXChest_M FKOffsetChest_M ;
    }
    if($fkxspine[0] == "FKSpine2_M")
    {
        parent FKXSpine2_M FKOffsetSpine2_M ;
    }
    if($fkxspinea[0] == "FKOffsetSpine2_M")
    {
        string $goup3 = `group -n "FKExtraSpine2_M_rotate"  FKExtraSpine2_M`;
        string $goup4 = `group -n "FKExtraSpine2_M_pos" $goup3`;
        parent $goup4 FKOffsetSpine1_M ;
    }
    if($fkxchesta[0] == "FKOffsetChest_M")
    {
        string $goup1 = `group -n "FKExtraChest_M_rotate"  FKExtraChest_M`;
        string $goup2 = `group -n "FKExtraChest_M_pos" $goup1`;
        float $spine7[]=`xform -q -ws -t Spine2_M`;
        move $spine7[0] $spine7[1] $spine7[2] ($goup2+".scalePivot") ($goup2+".rotatePivot");
        parent $goup2 FKExtraSpine2_M_pos;
    }
    orientConstraint -mo -weight 1  "FKSpine2_M" "FKExtraChest_M_pos";
    orientConstraint  -mo -weight 1  "ro_Spine1_M" "FKXSpine1_M";    
    orientConstraint  -mo -weight 1  "ro_Spine2_M" "FKXSpine2_M";
    orientConstraint  -mo -weight 1  "ro_Spine3_M" "FKXSpine3_M";
    orientConstraint  -mo -weight 1  "ro_Chest_M" "FKXChest_M";
    string $aamA = `shadingNode -asUtility plusMinusAverage -n "spine_PMINA"`;
    connectAttr -f FKChest_M.rotateY ($aamA+".input1D[0]");
    connectAttr -f FKSpine2_M.rotateY ($aamA+".input1D[1]");
    connectAttr -f ($aamA+".output1D") spine_ro_ikHandle1.twist;
    setAttr "spine_ro_deformer_G.visibility" 0;
    setAttr "ro_joint_G.visibility" 0;
    
}

if(!`objExists "MUMD_Neck01"` && !`objExists "MUMD_Neck02"`)
{
    string $multDivideNeck1 = `shadingNode -asUtility multiplyDivide -n "MUMD_Neck01"`;
    string $multDivideNeck2  = `shadingNode -asUtility multiplyDivide -n "MUMD_Neck02"`;
    setAttr ($multDivideNeck1+".input2Z") .5;
    setAttr ($multDivideNeck1+".input2X") .5;
    setAttr ($multDivideNeck1+".input2Y") .5;
    setAttr ($multDivideNeck2+".input2Z") .25;
    setAttr ($multDivideNeck2+".input2X") .25;
    setAttr ($multDivideNeck2+".input2Y") .25;
    connectAttr -f FKNeck_M.rotate ($multDivideNeck1+".input1");
    connectAttr -f FKNeck_M.rotate ($multDivideNeck2+".input1");
    connectAttr -f ($multDivideNeck1+".output") FKExtraNeck1_M.rotate;
    connectAttr -f ($multDivideNeck2+".output") FKExtraNeck2_M.rotate;   
}
select -cl  ;
return "Íê±Ï";
}