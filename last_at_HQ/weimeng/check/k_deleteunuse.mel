global proc string[] k_deleteunuse()
{
    

	int $showProgress = cleanUp_ShouldReportProgress();

	int $i, $j, $count;

    int $knum=0;
    
    string $kunsuse[];
    
	string $sets[] = `ls -sets`;
	$count = `size($sets)`;

	int $numDeleted = 0;
	int $interrupted = 0;


	if( $showProgress )
	{
		cleanUp_StartProgress( $count, "Rendering Nodes: Deleting empty shading groups", 1 );
	}

	for ($i = 0; $i < $count; $i++)
	{

		if( $showProgress )
		
		{
			if( cleanUp_SetProgress( $i ) )
			{
				$interrupted = 1;
				break;
			}
		}
		if ( shadingGroupUnused($sets[$i]) ) {
		    
		    $kunsuse[$knum]=$sets[$i];
		    
		    $knum++;
		    
			//$numDeleted += deleteIfNotReferenced( $sets[$i] );
		}
	}

///cleanUp_SetProgress(2)


	if( $showProgress )
	{
		cleanUp_EndProgress();
	}


	if( $interrupted )
	{
		//return $numDeleted;
		//return $kunsuse;
	}



	int $shouldDelete = false;
	int $count2;
	string $materials[] = `ls -long -mat`;
	string $se[];
	string $conn[];
	$count = `size($materials)`;


	if( $showProgress )
	{
		cleanUp_StartProgress( $count, "Rendering Nodes: Deleting unconnected materials", 1 );
	}

	for ($i = 0; $i < $count; $i++)
	{


		if( $showProgress )
		{
			if( cleanUp_SetProgress( $i ) )
			{
				$interrupted = 1;
				break;
			}
		}


		string $currShader = $materials[$i];

		$conn = `listConnections -shapes true -connections true -source false $currShader`;

		$count2 = `size($conn)`;
		for ($j = 0; $j < $count2; $j+=2) {
			clear $se;
			if ($conn[$j] != ($currShader + ".message")) {
				$shouldDelete = false;
				break;
			} else {

				$se = `listConnections -type shadingEngine ($conn[$j])`;
				
				int $thirdPartyPreventDeletions[] = `callbacks -executeCallbacks -hook "preventMaterialDeletionFromCleanUpSceneCommand" $currShader $conn[$j+1] $conn[$j]`;
				int $thirdPartyPreventsDeletion = false;
				for($deletionPrevented in $thirdPartyPreventDeletions)
				{
					if($deletionPrevented)
					{
						$thirdPartyPreventsDeletion = true;
						break;
					}
				}
				
				if (size($se) != 0) {
					$shouldDelete = false;
					break;
				}
				else if ($thirdPartyPreventsDeletion) {
					$shouldDelete = false;
					break;
				}
				else {
					$shouldDelete = true;
				}
			}
		}

		if ($shouldDelete) {
		    
		     $kunsuse[$knum]=$currShader;
		    
		    $knum++;
		    
		    
			$numDeleted += deleteIfNotReferenced( $currShader );
		}

		$shouldDelete = false;
		clear $conn;
		clear $se;
	}


	if( $showProgress )
	{
		cleanUp_EndProgress();
	}


	if( $interrupted )
	{
		//return $numDeleted;
		//return $kunsuse;
	}



	int $deleteAnything = true;
	int $oldSizeAll = 0;
	string $all[];
	string $conn[];
	string $type,$node,$connType,$attrName;

	int $it = 0;

	while ($deleteAnything)
	{
		$it++;
		$deleteAnything = false;


		if( $showProgress )
		{
			cleanUp_StartProgress( -1, ("Rendering Nodes: finding texture/utility nodes (iteration " + $it + ")"), 0 );
		}

		$all = getRenderNodes();


		if( $showProgress )
		{
			cleanUp_EndProgress();
		}

		$count = size($all);


		if( $showProgress )
		{
			cleanUp_StartProgress( $count, ("Rendering Nodes: deleting unused texture/utility nodes (iteration " + $it + ")"), 1 );
		}


		if($oldSizeAll != $count)
		{
			for( $i = 0; $i < $count; $i++ )
			{
				$node = $all[$i];


				if( $showProgress )
				{
					if( cleanUp_SetProgress( $i ) )
					{
						$interrupted = 1;
						break;
					}
				}


				if (!`objExists $node`)
				    continue;

				$type = `nodeType $node`;


				if( $type == "heightField" )
				{
					$conn = `listConnections -connections true
						-source true -shapes true $node`;
					if( size( $conn ) != 0 )
					{
						continue;
					}
				}
				

				if ( $type == "imagePlane" )
				{

					$attrName = $node + ".lockedToCamera";
					if ( `getAttr $attrName` == 0 )
					{

							continue;
					}		
				}


                $shouldDelete = true;


                $conn = `listConnections -connections true -source false -shapes true $node`;
                int $connCount = size($conn);
                for ($j = 0; $j < $connCount; $j+=2)
				{
                    $attrName = match (".message",$conn[$j]);
                    if ($attrName == ".message")
					{

                        $connType = `nodeType $conn[$j+1]`;
                        if ($connType == "shadingEngine"
                        ||  `objectType -isa "camera" $conn[$j+1]`
                        ||  $connType == "imagePlane"
                        ||  $connType == "arrayMapper"
                        ||  $connType == "directionalLight"
                        ||  $connType == "spotLight"
                        ||  $connType == "pointLight"
                        ||  $connType == "areaLight"
                        ||  $connType == "transform"
                         )
                        {
                            $shouldDelete = false;
                        }
                        else if( `isClassified $conn[$j+1] "shader/surface"`
                              || `isClassified $conn[$j+1] "shader/volume"`
                              || `isClassified $conn[$j+1] "shader/displacement"`) {
                            $shouldDelete = false;
                        }


						int $thirdPartyPreventDeletions[] = `callbacks -executeCallbacks -hook "preventMaterialDeletionFromCleanUpSceneCommand" $node $conn[$j+1] $conn[$j]`;
						for($deletionPrevented in $thirdPartyPreventDeletions)
						{
							if($deletionPrevented )
							{
								$shouldDelete = false;
								break;
							}
						}
						
                        if (!$shouldDelete)
                            break;
                    }
                    else {
								$shouldDelete = false;
								break;
							}
						} 
						if ($shouldDelete)
						{
						    		$kunsuse[$knum]=$node;		    
		        $knum++;
							$numDeleted += deleteIfNotReferenced( $node );
							$deleteAnything = true;
						}

			$shouldDelete = false;
			} 
			$oldSizeAll = $count;
		}
        else
		{
			$deleteAnything = false;
		}


		if( $showProgress )
		{
			cleanUp_EndProgress();
		}

		if( $interrupted )
		{
			break;
		}
	}


	if( $showProgress )
	{
		cleanUp_EndProgress();
	}

	//return $numDeleted;
	return $kunsuse;

}

