
//
//////////////////////////////////////////////////////////

global proc yzlCopySkinWeights()
{
 string $pointArray[],$pointName ;
 
 $pointName = `text -query -label yzlCopyWeightText`;

 if ($pointName == "")
 {
  warning("Please select a source vertex first.") ;
  return ;
 }

 print ("pointName: "+$pointName+"\n");

 string $name_parts[];
 
 int $tok = tokenize($pointName, ".", $name_parts);
 string $shape[] = `listRelatives -f -c $name_parts[0]`;
 //string $pt = ($shape[0]+"."+$name_parts[1]);
 $pt = $pointName ;
 //string $cluster = `yzlCopyWeightGetSkinCluster $shape[0]`;
 string $cluster = `yzlCopyWeightGetSkinCluster $name_parts[0]`;

// OKC: take away the -ib parameter because we want to copy also weights which are zero

 string $trans[] = `skinPercent -q -t $cluster $pt`;
 string $tran;
 int $spacing = 0;

 for($tran in $trans)
 {
  if(`size $tran`>$spacing)
  {
   $spacing = `size $tran`;
  }
 }

 $spacing = $spacing + 5;
 string $val_list[];
 int $v = 0;
 for($tran in $trans)
 {
  if(`size $tran`<$spacing)
  {
   float $val = `skinPercent -t $tran -q $cluster $pt`;
   $val_list[$v] = $val;
   $v++;
  }
 }

// OKC
// copy from source pointName to ALL other selected pointNames

 $selectedPoint = `ls -sl`;
 
 $pointArray = `filterExpand -sm 28 -sm 31 -sm 36 -sm 46 $selectedPoint` ;

 for ($ii = 0; $ii < size($pointArray); $ii++)
 {
  string $cv1 = $pointArray[$ii];
  print ("COPYING WEIGHTS TO CV: "+$cv1+"\n");
  string $name_parts1[];
  int $tok = tokenize($cv1, ".", $name_parts1);
  string $shape1[] = `listRelatives -f -c $name_parts1[0]`;
  string $pt1 = ($shape1[0]+"."+$name_parts1[1]);
  print ("selected object:" + $name_parts1[0] + "\n") ;
  //string $cluster1 = `yzlCopyWeightGetSkinCluster $shape1[0]`;
  string $cluster1 = `yzlCopyWeightGetSkinCluster $name_parts1[0]`;

  string $cmd = "skinPercent -prw 0.001 ";
  for($i=0;$i<$v;$i++)
  {
   $cmd = ($cmd+"-tv "+$trans[$i]+" "+$val_list[$i]+" ");
  }
  $cmd = ($cmd+$cluster1+" "+$cv1);

  eval $cmd;
 }

}

global proc yzlCopyWeightSelSourceCmd()
{
 string $selected[] ;
 
 $selected = `ls -sl` ;
 $selected = `filterExpand -sm 28 -sm 31 -sm 36 -sm 46 $selected` ;

 if (`size $selected`)
 {
  text -edit -label $selected[0] yzlCopyWeightText;
 }
 else
 {
  text -edit -label "" yzlCopyWeightText;
  warning("select only ONE vertex as source");
 }
}



global proc string yzlCopyWeightGetSkinCluster(string $skin)
{
 string $skinCluster,$history[] ;

 print ("!!!skin:" + $skin) ;
 $history = `listHistory $skin`;
 $history = `ls -type "skinCluster" $history`;

 if (`size $history`)
 {
  $skinCluster = $history[0];
 }

 return $skinCluster;
}

/////////////////////////////////////////////////////////////////////////////////
// Procedure Name: yzlCopyWeightUI
/////////////////////////////////////////////////////////////////////////////////
global proc yzlCopyWeightsUI()
{

 if(`window -exists yzlCopyWeightsWin`)
 {
  deleteUI yzlCopyWeightsWin ;
  if(`windowPref -exists yzlCopyWeightsWin`)
  {
   windowPref -remove yzlCopyWeightsWin ;
  }
 }

 window -widthHeight 300 120
	-title "y_copy weights "
	yzlCopyWeightsWin ;

 menuBarLayout;
  menu -label "yzl" ;
     menuItem -label "Exit" ;
  menu -label "Help" ;
     menuItem -label "yanzhili"
	      -command "";
 setParent ..;

 columnLayout -columnAlign "center"
	 -adjustableColumn true
	 -rowSpacing 5 ;

   button -label "Select Source"
	  -command "yzlCopyWeightSelSourceCmd"
	  ;
   text -label "" yzlCopyWeightText ;

   button -label "Copy Weight"
	  -command "yzlCopySkinWeights"
	  ;
 setParent ..;

 showWindow yzlCopyWeightsWin;
}
yzlCopyWeightsUI;
//End of file.